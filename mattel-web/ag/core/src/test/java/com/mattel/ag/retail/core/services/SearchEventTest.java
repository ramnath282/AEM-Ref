package com.mattel.ag.retail.core.services;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.jcr.Node;
import javax.jcr.NodeIterator;
import javax.jcr.Property;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.Value;

import org.apache.sling.api.resource.LoginException;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.api.resource.ValueMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.day.cq.search.PredicateGroup;
import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;
import com.mattel.ag.retail.core.pojos.EventPojo;
import com.mattel.ag.retail.core.pojos.LocationDateDetailsPojo;
import com.mattel.ag.retail.core.pojos.LocationDetailsPojo;
import com.mattel.ag.retail.core.utils.PropertyReaderUtils;


@RunWith(PowerMockRunner.class)
@PrepareForTest(PredicateGroup.class)
public class SearchEventTest {
	
	SearchEvents searchEvents;
	ResourceResolverFactory resourceResolverFactory;
	Resource resource;
	QueryBuilder queryBuilder;
	SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
	String currentStoreTag = "ag:retail/storesList/boston";
	ResourceResolver resolver;
	Session session;
	PredicateGroup predicateGroup;
	NodeIterator nodeIterator;
	Query query;
	SearchResult result;
	Hit hit;
	ValueMap valueMap;
	Value value;
	List<Hit> hits;
	Node node;
	PropertyReaderUtils propertyReaderUtils;
	Iterator<Resource> resourceIterator;
	EventPojo eventPojo;
	Property property;
	LocationDetailsPojo locationDetailsPojo;
	LocationDateDetailsPojo locationDateDetailsPojo;
	List<LocationDetailsPojo> locationDetails = new ArrayList<>();
	List<LocationDateDetailsPojo> locationDates = new ArrayList<>();
	String valueString = "_value";
	String jcrContentPredicateString = "@jcr:content/";
	
	@Before
	public void setUp() throws LoginException, RepositoryException {
		eventPojo = new EventPojo();
		locationDetailsPojo = new LocationDetailsPojo();
		locationDateDetailsPojo = new LocationDateDetailsPojo();
		node = Mockito.mock(Node.class);
		result = Mockito.mock(SearchResult.class);
		query = Mockito.mock(Query.class);
		session = Mockito.mock(Session.class);
		hit = Mockito.mock(Hit.class);
		hits = new ArrayList<Hit>();
		nodeIterator = Mockito.mock(NodeIterator.class);
		property = Mockito.mock(Property.class);
		value = Mockito.mock(Value.class);
		valueMap = Mockito.mock(ValueMap.class);
		hits.add(hit);
		Map<String, Object> map = new HashMap<>();
		map.put(ResourceResolverFactory.SUBSERVICE, "readwriteservice");
		searchEvents = new SearchEvents();
		resourceResolverFactory = Mockito.mock(ResourceResolverFactory.class);
		queryBuilder = Mockito.mock(QueryBuilder.class);
		resolver = Mockito.mock(ResourceResolver.class);
		searchEvents.setResourceResolverFactory(resourceResolverFactory);
		searchEvents.setQueryBuilder(queryBuilder);
		Mockito.when(resourceResolverFactory.getServiceResourceResolver(map)).thenReturn(resolver);
		PowerMockito.mockStatic(PredicateGroup.class);
		propertyReaderUtils = Mockito.mock(PropertyReaderUtils.class);
		searchEvents.setPropertyReaderUtils(propertyReaderUtils);
		Mockito.when(propertyReaderUtils.getEventsPath()).thenReturn("/content/ag/en/retail/events");
		resource = Mockito.mock(Resource.class);
		
	}
	
	@Test
	public void getSearchResultsTest() throws RepositoryException, LoginException {
		Map<String, String> searchFilters = new HashMap<>();
		searchFilters.put("eventId", "1");
		searchFilters.put("eventTitle", "eventTitle");
		searchFilters.put("storeName", "storeName");
		searchFilters.put("keywords", "keywords1,keywords2,keywords3");
		searchFilters.put("storeTag", "ag:retail/storesList/boston");
		Map<String, String> querymap = new HashMap<>();
		querymap.put("type", "cq:Page");
		querymap.put("path", "/content/ag/en/retail/events");
		querymap.put("p.limit", "-1");
		querymap.put("5_property", jcrContentPredicateString + "eventIdAtStore");
		querymap.put("5_property.value", searchFilters.get("eventId"));
		querymap.put("6_property", jcrContentPredicateString + "storeTag");
		querymap.put("6_property.value", searchFilters.get("storeTag"));
		Mockito.when(resolver.adaptTo(Session.class)).thenReturn(session);
		querymap.put("p.limit", "-1");
		Mockito.when(valueMap.containsKey("eventId")).thenReturn(true);
		Mockito.when(valueMap.containsKey("eventTitle")).thenReturn(true);
		Mockito.when(valueMap.containsKey("keywords")).thenReturn(true);
		Mockito.when(valueMap.containsKey("storeTag")).thenReturn(true);
		Mockito.when(valueMap.get("eventId", String.class)).thenReturn("1");
		Mockito.when(valueMap.get("eventId")).thenReturn("1");
		Mockito.when(valueMap.get("eventTitle")).thenReturn("eventTitle");
		Mockito.when(valueMap.get("storeName", String.class)).thenReturn("storeName");
		Mockito.when(valueMap.get("eventDate", String.class)).thenReturn("2020-01-17T00:00:00.000Z");
		Mockito.when(valueMap.get("eventStartTime", String.class)).thenReturn("07:00");
		Mockito.when(valueMap.get("eventEndTime", String.class)).thenReturn("09:00");
		predicateGroup = Mockito.mock(PredicateGroup.class);
		Mockito.when(PredicateGroup.create(querymap)).thenReturn(predicateGroup);
		Mockito.when(queryBuilder.createQuery(PredicateGroup.create(querymap), session)).thenReturn(query);
		Mockito.when(query.getResult()).thenReturn(result);
		Mockito.when(result.getHits()).thenReturn(hits);
		Mockito.when(hit.getProperties()).thenReturn(valueMap);
		Mockito.when(hit.getNode()).thenReturn(node);
		Mockito.when( hit.getPath()).thenReturn("path");
		Mockito.when(resolver.getResource("path/jcr:content")).thenReturn(resource);
		Mockito.when(resource.getValueMap()).thenReturn(valueMap);
		Mockito.when(node.getParent()).thenReturn(node);
		Mockito.when(node.getNodes()).thenReturn(nodeIterator);
		Mockito.when(nodeIterator.nextNode()).thenReturn(node);
		Mockito.when(node.getName()).thenReturn("name");
		Mockito.when(node.getPath()).thenReturn("path");
		//Mockito.when(node.getName()).thenReturn("jcr:content");
		Mockito.when(node.hasProperty("eventId")).thenReturn(true);
		Mockito.when(node.hasProperty("eventDescription")).thenReturn(true);
		Mockito.when(node.hasProperty("eventTitle")).thenReturn(true);
		Mockito.when(node.hasProperty("minAge")).thenReturn(true);
		Mockito.when(node.hasProperty("reservationRequired")).thenReturn(true);
		Mockito.when(node.hasProperty("zomatoURL")).thenReturn(true);
		Mockito.when(node.hasProperty("storeTag")).thenReturn(true);
		Mockito.when(node.hasProperty("storeName")).thenReturn(true);
		Mockito.when(node.hasProperty("gratuityRequired")).thenReturn(true);
		Mockito.when(node.hasProperty("pricingAmount")).thenReturn(true);
		Mockito.when(node.hasProperty("pricingOption")).thenReturn(true);
		Mockito.when(node.hasProperty("eventDate")).thenReturn(true);
		Mockito.when(node.hasProperty("eventEndTime")).thenReturn(true);
		Mockito.when(node.hasProperty("eventStartTime")).thenReturn(true);
		Mockito.when(node.hasProperty("scheduleDescription")).thenReturn(true);
		Mockito.when(node.hasProperty("additionalDateInfo")).thenReturn(true);
		Mockito.when(node.getProperty("eventId")).thenReturn(property);
		Mockito.when(node.getProperty("eventId").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventId").getValue().getString()).thenReturn("1");
		Mockito.when(node.getProperty("eventDescription")).thenReturn(property);
		Mockito.when(node.getProperty("eventDescription").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventDescription").getValue().getString()).thenReturn("eventDescription");
		Mockito.when(node.getProperty("eventTitle")).thenReturn(property);
		Mockito.when(node.getProperty("eventTitle").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventTitle").getValue().getString()).thenReturn("eventTitle");
		Mockito.when(node.getProperty("minAge")).thenReturn(property);
		Mockito.when(node.getProperty("minAge").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("minAge").getValue().getString()).thenReturn("minAge");
		Mockito.when(node.getProperty("reservationRequired")).thenReturn(property);
		Mockito.when(node.getProperty("reservationRequired").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("reservationRequired").getValue().getString()).thenReturn("reservationRequired");
		Mockito.when(node.getProperty("zomatoURL")).thenReturn(property);
		Mockito.when(node.getProperty("zomatoURL").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("zomatoURL").getValue().getString()).thenReturn("zomatoURL");
		Mockito.when(node.getProperty("storeTag")).thenReturn(property);
		Mockito.when(node.getProperty("storeTag").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("storeTag").getValue().getString()).thenReturn("storeTag");
		Mockito.when(node.getProperty("storeName")).thenReturn(property);
		Mockito.when(node.getProperty("storeName").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("storeName").getValue().getString()).thenReturn("storeName");
		Mockito.when(node.getProperty("gratuityRequired")).thenReturn(property);
		Mockito.when(node.getProperty("gratuityRequired").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("gratuityRequired").getValue().getString()).thenReturn("gratuityRequired");
		Mockito.when(node.getProperty("pricingAmount")).thenReturn(property);
		Mockito.when(node.getProperty("pricingAmount").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("pricingAmount").getValue().getString()).thenReturn("pricingAmount");
		Mockito.when(node.getProperty("pricingOption")).thenReturn(property);
		Mockito.when(node.getProperty("pricingOption").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("pricingOption").getValue().getString()).thenReturn("pricingOption");
		Mockito.when(node.getProperty("eventDate")).thenReturn(property);
		Mockito.when(node.getProperty("eventDate").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventDate").getValue().getString()).thenReturn("2019-01-11T00:00:00.000Z");
		Mockito.when(node.getProperty("eventEndTime")).thenReturn(property);
		Mockito.when(node.getProperty("eventEndTime").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventEndTime").getValue().getString()).thenReturn("eventEndTime");
		Mockito.when(node.getProperty("eventStartTime")).thenReturn(property);
		Mockito.when(node.getProperty("eventStartTime").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventStartTime").getValue().getString()).thenReturn("eventStartTime");
		Mockito.when(node.getProperty("scheduleDescription")).thenReturn(property);
		Mockito.when(node.getProperty("scheduleDescription").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("scheduleDescription").getValue().getString()).thenReturn("scheduleDescription");
		Mockito.when(node.getProperty("additionalDateInfo")).thenReturn(property);
		Mockito.when(node.getProperty("additionalDateInfo").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("additionalDateInfo").getValue().getString()).thenReturn("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setAdditionalDateInfo("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setEventDate("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setEventEndTime("eventEndTime");
		locationDateDetailsPojo.setEventStartTime("eventStartTime");
		locationDateDetailsPojo.setScheduleDescription("scheduleDescription");
		locationDates.add(locationDateDetailsPojo);
		locationDetailsPojo.setGratuityRequired("gratuityRequired");
		locationDetailsPojo.setLocationDateDetails(locationDates);
		locationDetailsPojo.setStoreName("locationName");
		locationDetailsPojo.setPricingAmount("pricingAmount");
		locationDetailsPojo.setPricingOption("pricingOption");
		locationDetailsPojo.setStoreTag("storeTag");
		locationDetailsPojo.setZomatoURL("zomatoURL");
		locationDetails.add(locationDetailsPojo);
		eventPojo.setEventId("1");
		eventPojo.setEventTitle("eventTitle");
		eventPojo.setLocationDetails(locationDetails);
		eventPojo.setMinAge("minAge");
		eventPojo.setReservationRequired("reservationRequired");
		eventPojo.setEventDescription("eventDescriptions");
		Mockito.when(nodeIterator.hasNext()).thenReturn(true,true,true,false);
		Mockito.when(nodeIterator.next()).thenReturn(node);
		searchEvents.getSearchResults(searchFilters);
	}
	
	@Test
	public void getSearchResultsTest2() throws RepositoryException, LoginException {
		Map<String, String> searchFilters = new HashMap<>();
		searchFilters.put("storeTag", "ag:retail/storesList/boston");
		Map<String, String> querymap = new HashMap<>();
		querymap.put("type", "cq:Page");
		querymap.put("path", "/content/ag/en/retail/events");
		querymap.put("p.limit", "-1");
		querymap.put("4_property", jcrContentPredicateString + "storeTag");
		querymap.put("4_property.value", searchFilters.get("storeTag"));
		Mockito.when(valueMap.containsKey("eventId")).thenReturn(true);
		Mockito.when(valueMap.containsKey("eventTitle")).thenReturn(true);
		Mockito.when(valueMap.containsKey("keywords")).thenReturn(true);
		Mockito.when(valueMap.containsKey("storeTag")).thenReturn(true);
		Mockito.when(valueMap.get("eventId", String.class)).thenReturn("1");
		Mockito.when(valueMap.get("eventId")).thenReturn("1");
		Mockito.when(valueMap.get("eventTitle")).thenReturn("eventTitle");
		Mockito.when(valueMap.get("storeName", String.class)).thenReturn("storeName");
		Mockito.when(valueMap.get("eventDate", String.class)).thenReturn("2020-01-17T00:00:00.000Z");
		Mockito.when(valueMap.get("eventStartTime", String.class)).thenReturn("07:00");
		Mockito.when(valueMap.get("eventEndTime", String.class)).thenReturn("09:00");
		Mockito.when(valueMap.get("storeTag", String.class)).thenReturn("ag:retail/storesList/boston");
		Mockito.when(valueMap.get("storeName")).thenReturn("Boston");
		Mockito.when(resolver.adaptTo(Session.class)).thenReturn(session);
		querymap.put("p.limit", "-1");
		predicateGroup = Mockito.mock(PredicateGroup.class);
		Mockito.when(PredicateGroup.create(querymap)).thenReturn(predicateGroup);
		Mockito.when(queryBuilder.createQuery(PredicateGroup.create(querymap), session)).thenReturn(query);
		Mockito.when(query.getResult()).thenReturn(result);
		Mockito.when(result.getHits()).thenReturn(hits);
		Mockito.when(hit.getProperties()).thenReturn(valueMap);
		Mockito.when(hit.getNode()).thenReturn(node);
		Mockito.when( hit.getPath()).thenReturn("path");
		Mockito.when(resolver.getResource("path/jcr:content")).thenReturn(resource);
		Mockito.when(resource.getValueMap()).thenReturn(valueMap);
		Mockito.when(node.getParent()).thenReturn(node);
		Mockito.when(node.getNodes()).thenReturn(nodeIterator);
		Mockito.when(nodeIterator.nextNode()).thenReturn(node);
		Mockito.when(node.getName()).thenReturn("name");
		Mockito.when(node.getPath()).thenReturn("path");
		Mockito.when(resource.getParent()).thenReturn(resource);
		Mockito.when(resource.getPath()).thenReturn("path");
		Mockito.when(resolver.getResource("path/jcr:content")).thenReturn(resource);
		Mockito.when(resource.adaptTo(Node.class)).thenReturn(node);
		//Mockito.when(node.getName()).thenReturn("jcr:content");
		Mockito.when(node.hasProperty("eventId")).thenReturn(true);
		Mockito.when(node.hasProperty("eventDescription")).thenReturn(true);
		Mockito.when(node.hasProperty("eventTitle")).thenReturn(true);
		Mockito.when(node.hasProperty("minAge")).thenReturn(true);
		Mockito.when(node.hasProperty("reservationRequired")).thenReturn(true);
		Mockito.when(node.hasProperty("zomatoURL")).thenReturn(true);
		Mockito.when(node.hasProperty("storeTag")).thenReturn(true);
		Mockito.when(node.hasProperty("storeName")).thenReturn(true);
		Mockito.when(node.hasProperty("gratuityRequired")).thenReturn(true);
		Mockito.when(node.hasProperty("pricingAmount")).thenReturn(true);
		Mockito.when(node.hasProperty("pricingOption")).thenReturn(true);
		Mockito.when(node.hasProperty("eventDate")).thenReturn(true);
		Mockito.when(node.hasProperty("eventEndTime")).thenReturn(true);
		Mockito.when(node.hasProperty("eventStartTime")).thenReturn(true);
		Mockito.when(node.hasProperty("scheduleDescription")).thenReturn(true);
		Mockito.when(node.hasProperty("additionalDateInfo")).thenReturn(true);
		Mockito.when(node.getProperty("eventId")).thenReturn(property);
		Mockito.when(node.getProperty("eventId").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventId").getValue().getString()).thenReturn("1");
		Mockito.when(node.getProperty("eventDescription")).thenReturn(property);
		Mockito.when(node.getProperty("eventDescription").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventDescription").getValue().getString()).thenReturn("eventDescription");
		Mockito.when(node.getProperty("eventTitle")).thenReturn(property);
		Mockito.when(node.getProperty("eventTitle").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventTitle").getValue().getString()).thenReturn("eventTitle");
		Mockito.when(node.getProperty("minAge")).thenReturn(property);
		Mockito.when(node.getProperty("minAge").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("minAge").getValue().getString()).thenReturn("minAge");
		Mockito.when(node.getProperty("reservationRequired")).thenReturn(property);
		Mockito.when(node.getProperty("reservationRequired").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("reservationRequired").getValue().getString()).thenReturn("reservationRequired");
		Mockito.when(node.getProperty("zomatoURL")).thenReturn(property);
		Mockito.when(node.getProperty("zomatoURL").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("zomatoURL").getValue().getString()).thenReturn("zomatoURL");
		Mockito.when(node.getProperty("storeTag")).thenReturn(property);
		Mockito.when(node.getProperty("storeTag").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("storeTag").getValue().getString()).thenReturn("storeTag");
		Mockito.when(node.getProperty("storeName")).thenReturn(property);
		Mockito.when(node.getProperty("storeName").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("storeName").getValue().getString()).thenReturn("storeName");
		Mockito.when(node.getProperty("gratuityRequired")).thenReturn(property);
		Mockito.when(node.getProperty("gratuityRequired").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("gratuityRequired").getValue().getString()).thenReturn("gratuityRequired");
		Mockito.when(node.getProperty("pricingAmount")).thenReturn(property);
		Mockito.when(node.getProperty("pricingAmount").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("pricingAmount").getValue().getString()).thenReturn("pricingAmount");
		Mockito.when(node.getProperty("pricingOption")).thenReturn(property);
		Mockito.when(node.getProperty("pricingOption").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("pricingOption").getValue().getString()).thenReturn("pricingOption");
		Mockito.when(node.getProperty("eventDate")).thenReturn(property);
		Mockito.when(node.getProperty("eventDate").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventDate").getValue().getString()).thenReturn("2019-01-11T00:00:00.000Z");
		Mockito.when(node.getProperty("eventEndTime")).thenReturn(property);
		Mockito.when(node.getProperty("eventEndTime").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventEndTime").getValue().getString()).thenReturn("eventEndTime");
		Mockito.when(node.getProperty("eventStartTime")).thenReturn(property);
		Mockito.when(node.getProperty("eventStartTime").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventStartTime").getValue().getString()).thenReturn("eventStartTime");
		Mockito.when(node.getProperty("scheduleDescription")).thenReturn(property);
		Mockito.when(node.getProperty("scheduleDescription").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("scheduleDescription").getValue().getString()).thenReturn("scheduleDescription");
		Mockito.when(node.getProperty("additionalDateInfo")).thenReturn(property);
		Mockito.when(node.getProperty("additionalDateInfo").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("additionalDateInfo").getValue().getString()).thenReturn("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setAdditionalDateInfo("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setEventDate("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setEventEndTime("eventEndTime");
		locationDateDetailsPojo.setEventStartTime("eventStartTime");
		locationDateDetailsPojo.setScheduleDescription("scheduleDescription");
		locationDates.add(locationDateDetailsPojo);
		locationDetailsPojo.setGratuityRequired("gratuityRequired");
		locationDetailsPojo.setLocationDateDetails(locationDates);
		locationDetailsPojo.setStoreName("locationName");
		locationDetailsPojo.setPricingAmount("pricingAmount");
		locationDetailsPojo.setPricingOption("pricingOption");
		locationDetailsPojo.setStoreTag("storeTag");
		locationDetailsPojo.setZomatoURL("zomatoURL");
		locationDetails.add(locationDetailsPojo);
		eventPojo.setEventId("1");
		eventPojo.setEventTitle("eventTitle");
		eventPojo.setLocationDetails(locationDetails);
		eventPojo.setMinAge("minAge");
		eventPojo.setReservationRequired("reservationRequired");
		eventPojo.setEventDescription("eventDescriptions");
		Mockito.when(nodeIterator.hasNext()).thenReturn(true,true,true,false);
		Mockito.when(nodeIterator.next()).thenReturn(node);
		searchEvents.getSearchResults(searchFilters);
	}
	
	@Test
	public void getSearchResultsTest3() throws RepositoryException, LoginException {
		Map<String, String> searchFilters = new HashMap<>();
		searchFilters.put("eventTitle", "eventTitle");
		searchFilters.put("keywords", "keywords1");
		Map<String, String> querymap = new HashMap<>();
		querymap.put("type", "cq:Page");
		querymap.put("path", "/content/ag/en/retail/events");
		querymap.put("p.limit", "-1");
		querymap.put("2_property.operation", "like");
		querymap.put("2_property", jcrContentPredicateString + "eventTitle");
		querymap.put("2_property.value","%"+ searchFilters.get("eventTitle")+"%");
		querymap.put("3_property", jcrContentPredicateString + "keywords");
		querymap.put("3_property.1_value", searchFilters.get("keywords"));
		Mockito.when(valueMap.containsKey("eventId")).thenReturn(true);
		Mockito.when(valueMap.containsKey("eventTitle")).thenReturn(true);
		Mockito.when(valueMap.containsKey("keywords")).thenReturn(true);
		Mockito.when(valueMap.containsKey("storeTag")).thenReturn(true);
		Mockito.when(valueMap.get("eventId", String.class)).thenReturn("1");
		Mockito.when(valueMap.get("eventId")).thenReturn("1");
		Mockito.when(valueMap.get("eventTitle")).thenReturn("eventTitle");
		Mockito.when(valueMap.get("storeName", String.class)).thenReturn("storeName");
		Mockito.when(valueMap.get("eventDate", String.class)).thenReturn("2020-01-17T00:00:00.000Z");
		Mockito.when(valueMap.get("eventStartTime", String.class)).thenReturn("07:00");
		Mockito.when(valueMap.get("eventEndTime", String.class)).thenReturn("09:00");
		Mockito.when(valueMap.get("storeTag", String.class)).thenReturn("ag:retail/storesList/boston");
		Mockito.when(valueMap.get("storeName")).thenReturn("Boston");
		Mockito.when(resolver.adaptTo(Session.class)).thenReturn(session);
		querymap.put("p.limit", "-1");
		predicateGroup = Mockito.mock(PredicateGroup.class);
		Mockito.when(PredicateGroup.create(querymap)).thenReturn(predicateGroup);
		Mockito.when(queryBuilder.createQuery(PredicateGroup.create(querymap), session)).thenReturn(query);
		Mockito.when(query.getResult()).thenReturn(result);
		Mockito.when(result.getHits()).thenReturn(hits);
		Mockito.when(hit.getProperties()).thenReturn(valueMap);
		Mockito.when(hit.getNode()).thenReturn(node);
		Mockito.when( hit.getPath()).thenReturn("path");
		Mockito.when(resolver.getResource("path/jcr:content")).thenReturn(resource);
		Mockito.when(resource.getValueMap()).thenReturn(valueMap);
		Mockito.when(node.getParent()).thenReturn(node);
		Mockito.when(node.getNodes()).thenReturn(nodeIterator);
		Mockito.when(nodeIterator.nextNode()).thenReturn(node);
		Mockito.when(node.getName()).thenReturn("name");
		Mockito.when(node.getPath()).thenReturn("path");
		Mockito.when(resource.getParent()).thenReturn(resource);
		Mockito.when(resource.getPath()).thenReturn("path");
		Mockito.when(resolver.getResource("path/jcr:content")).thenReturn(resource);
		Mockito.when(resource.adaptTo(Node.class)).thenReturn(node);
		//Mockito.when(node.getName()).thenReturn("jcr:content");
		Mockito.when(node.hasProperty("eventId")).thenReturn(true);
		Mockito.when(node.hasProperty("eventDescription")).thenReturn(true);
		Mockito.when(node.hasProperty("eventTitle")).thenReturn(true);
		Mockito.when(node.hasProperty("minAge")).thenReturn(true);
		Mockito.when(node.hasProperty("reservationRequired")).thenReturn(true);
		Mockito.when(node.hasProperty("zomatoURL")).thenReturn(true);
		Mockito.when(node.hasProperty("storeTag")).thenReturn(true);
		Mockito.when(node.hasProperty("storeName")).thenReturn(true);
		Mockito.when(node.hasProperty("gratuityRequired")).thenReturn(true);
		Mockito.when(node.hasProperty("pricingAmount")).thenReturn(true);
		Mockito.when(node.hasProperty("pricingOption")).thenReturn(true);
		Mockito.when(node.hasProperty("eventDate")).thenReturn(true);
		Mockito.when(node.hasProperty("eventEndTime")).thenReturn(true);
		Mockito.when(node.hasProperty("eventStartTime")).thenReturn(true);
		Mockito.when(node.hasProperty("scheduleDescription")).thenReturn(true);
		Mockito.when(node.hasProperty("additionalDateInfo")).thenReturn(true);
		Mockito.when(node.getProperty("eventId")).thenReturn(property);
		Mockito.when(node.getProperty("eventId").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventId").getValue().getString()).thenReturn("1");
		Mockito.when(node.getProperty("eventDescription")).thenReturn(property);
		Mockito.when(node.getProperty("eventDescription").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventDescription").getValue().getString()).thenReturn("eventDescription");
		Mockito.when(node.getProperty("eventTitle")).thenReturn(property);
		Mockito.when(node.getProperty("eventTitle").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventTitle").getValue().getString()).thenReturn("eventTitle");
		Mockito.when(node.getProperty("minAge")).thenReturn(property);
		Mockito.when(node.getProperty("minAge").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("minAge").getValue().getString()).thenReturn("minAge");
		Mockito.when(node.getProperty("reservationRequired")).thenReturn(property);
		Mockito.when(node.getProperty("reservationRequired").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("reservationRequired").getValue().getString()).thenReturn("reservationRequired");
		Mockito.when(node.getProperty("zomatoURL")).thenReturn(property);
		Mockito.when(node.getProperty("zomatoURL").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("zomatoURL").getValue().getString()).thenReturn("zomatoURL");
		Mockito.when(node.getProperty("storeTag")).thenReturn(property);
		Mockito.when(node.getProperty("storeTag").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("storeTag").getValue().getString()).thenReturn("storeTag");
		Mockito.when(node.getProperty("storeName")).thenReturn(property);
		Mockito.when(node.getProperty("storeName").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("storeName").getValue().getString()).thenReturn("storeName");
		Mockito.when(node.getProperty("gratuityRequired")).thenReturn(property);
		Mockito.when(node.getProperty("gratuityRequired").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("gratuityRequired").getValue().getString()).thenReturn("gratuityRequired");
		Mockito.when(node.getProperty("pricingAmount")).thenReturn(property);
		Mockito.when(node.getProperty("pricingAmount").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("pricingAmount").getValue().getString()).thenReturn("pricingAmount");
		Mockito.when(node.getProperty("pricingOption")).thenReturn(property);
		Mockito.when(node.getProperty("pricingOption").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("pricingOption").getValue().getString()).thenReturn("pricingOption");
		Mockito.when(node.getProperty("eventDate")).thenReturn(property);
		Mockito.when(node.getProperty("eventDate").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventDate").getValue().getString()).thenReturn("2019-01-11T00:00:00.000Z");
		Mockito.when(node.getProperty("eventEndTime")).thenReturn(property);
		Mockito.when(node.getProperty("eventEndTime").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventEndTime").getValue().getString()).thenReturn("eventEndTime");
		Mockito.when(node.getProperty("eventStartTime")).thenReturn(property);
		Mockito.when(node.getProperty("eventStartTime").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventStartTime").getValue().getString()).thenReturn("eventStartTime");
		Mockito.when(node.getProperty("scheduleDescription")).thenReturn(property);
		Mockito.when(node.getProperty("scheduleDescription").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("scheduleDescription").getValue().getString()).thenReturn("scheduleDescription");
		Mockito.when(node.getProperty("additionalDateInfo")).thenReturn(property);
		Mockito.when(node.getProperty("additionalDateInfo").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("additionalDateInfo").getValue().getString()).thenReturn("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setAdditionalDateInfo("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setEventDate("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setEventEndTime("eventEndTime");
		locationDateDetailsPojo.setEventStartTime("eventStartTime");
		locationDateDetailsPojo.setScheduleDescription("scheduleDescription");
		locationDates.add(locationDateDetailsPojo);
		locationDetailsPojo.setGratuityRequired("gratuityRequired");
		locationDetailsPojo.setLocationDateDetails(locationDates);
		locationDetailsPojo.setStoreName("locationName");
		locationDetailsPojo.setPricingAmount("pricingAmount");
		locationDetailsPojo.setPricingOption("pricingOption");
		locationDetailsPojo.setStoreTag("storeTag");
		locationDetailsPojo.setZomatoURL("zomatoURL");
		locationDetails.add(locationDetailsPojo);
		eventPojo.setEventId("1");
		eventPojo.setEventTitle("eventTitle");
		eventPojo.setLocationDetails(locationDetails);
		eventPojo.setMinAge("minAge");
		eventPojo.setReservationRequired("reservationRequired");
		eventPojo.setEventDescription("eventDescriptions");
		Mockito.when(nodeIterator.hasNext()).thenReturn(true,true,true,false);
		Mockito.when(nodeIterator.next()).thenReturn(node);
		searchEvents.getSearchResults(searchFilters);
	}
	
	@Test
	public void getSearchResultsTest4() throws RepositoryException, LoginException {
		Map<String, String> searchFilters = new HashMap<>();
		searchFilters.put("eventId", "1");
		searchFilters.put("eventTitle", "eventTitle");
		searchFilters.put("keywords", "keywords2");
		Map<String, String> querymap = new HashMap<>();
		querymap.put("type", "cq:Page");
		querymap.put("path", "/content/ag/en/retail/events");
		querymap.put("p.limit", "-1");
		querymap.put("1_property", jcrContentPredicateString + "eventId");
		querymap.put("1_property.value", searchFilters.get("eventId"));
		querymap.put("2_property.operation", "like");
		querymap.put("2_property", jcrContentPredicateString + "eventTitle");
		querymap.put("2_property.value","%"+ searchFilters.get("eventTitle")+"%");
		querymap.put("3_property", jcrContentPredicateString + "keywords");
		querymap.put("3_property.1_value", searchFilters.get("keywords"));
		Mockito.when(valueMap.containsKey("eventId")).thenReturn(true);
		Mockito.when(valueMap.containsKey("eventTitle")).thenReturn(true);
		Mockito.when(valueMap.containsKey("keywords")).thenReturn(true);
		Mockito.when(valueMap.containsKey("storeTag")).thenReturn(true);
		Mockito.when(valueMap.get("eventId", String.class)).thenReturn("1");
		Mockito.when(valueMap.get("eventId")).thenReturn("1");
		Mockito.when(valueMap.get("eventTitle")).thenReturn("eventTitle");
		Mockito.when(valueMap.get("storeName", String.class)).thenReturn("storeName");
		Mockito.when(valueMap.get("eventDate", String.class)).thenReturn("2020-01-17T00:00:00.000Z");
		Mockito.when(valueMap.get("eventStartTime", String.class)).thenReturn("07:00");
		Mockito.when(valueMap.get("eventEndTime", String.class)).thenReturn("09:00");
		Mockito.when(valueMap.get("storeTag", String.class)).thenReturn("ag:retail/storesList/boston");
		Mockito.when(valueMap.get("storeName")).thenReturn("Boston");
		Mockito.when(resolver.adaptTo(Session.class)).thenReturn(session);
		querymap.put("p.limit", "-1");
		predicateGroup = Mockito.mock(PredicateGroup.class);
		Mockito.when(PredicateGroup.create(querymap)).thenReturn(predicateGroup);
		Mockito.when(queryBuilder.createQuery(PredicateGroup.create(querymap), session)).thenReturn(query);
		Mockito.when(query.getResult()).thenReturn(result);
		Mockito.when(result.getHits()).thenReturn(hits);
		Mockito.when(hit.getProperties()).thenReturn(valueMap);
		Mockito.when(hit.getNode()).thenReturn(node);
		Mockito.when( hit.getPath()).thenReturn("path");
		Mockito.when(resolver.getResource("path/jcr:content")).thenReturn(resource);
		Mockito.when(resource.getValueMap()).thenReturn(valueMap);
		Mockito.when(node.getParent()).thenReturn(node);
		Mockito.when(node.getNodes()).thenReturn(nodeIterator);
		Mockito.when(nodeIterator.nextNode()).thenReturn(node);
		Mockito.when(node.getName()).thenReturn("name");
		Mockito.when(node.getPath()).thenReturn("path");
		Mockito.when(resource.getParent()).thenReturn(resource);
		Mockito.when(resource.getPath()).thenReturn("path");
		Mockito.when(resolver.getResource("path/jcr:content")).thenReturn(resource);
		Mockito.when(resource.adaptTo(Node.class)).thenReturn(node);
		//Mockito.when(node.getName()).thenReturn("jcr:content");
		Mockito.when(node.hasProperty("eventId")).thenReturn(true);
		Mockito.when(node.hasProperty("eventDescription")).thenReturn(true);
		Mockito.when(node.hasProperty("eventTitle")).thenReturn(true);
		Mockito.when(node.hasProperty("minAge")).thenReturn(true);
		Mockito.when(node.hasProperty("reservationRequired")).thenReturn(true);
		Mockito.when(node.hasProperty("zomatoURL")).thenReturn(true);
		Mockito.when(node.hasProperty("storeTag")).thenReturn(true);
		Mockito.when(node.hasProperty("storeName")).thenReturn(true);
		Mockito.when(node.hasProperty("gratuityRequired")).thenReturn(true);
		Mockito.when(node.hasProperty("pricingAmount")).thenReturn(true);
		Mockito.when(node.hasProperty("pricingOption")).thenReturn(true);
		Mockito.when(node.hasProperty("eventDate")).thenReturn(true);
		Mockito.when(node.hasProperty("eventEndTime")).thenReturn(true);
		Mockito.when(node.hasProperty("eventStartTime")).thenReturn(true);
		Mockito.when(node.hasProperty("scheduleDescription")).thenReturn(true);
		Mockito.when(node.hasProperty("additionalDateInfo")).thenReturn(true);
		Mockito.when(node.getProperty("eventId")).thenReturn(property);
		Mockito.when(node.getProperty("eventId").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventId").getValue().getString()).thenReturn("1");
		Mockito.when(node.getProperty("eventDescription")).thenReturn(property);
		Mockito.when(node.getProperty("eventDescription").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventDescription").getValue().getString()).thenReturn("eventDescription");
		Mockito.when(node.getProperty("eventTitle")).thenReturn(property);
		Mockito.when(node.getProperty("eventTitle").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventTitle").getValue().getString()).thenReturn("eventTitle");
		Mockito.when(node.getProperty("minAge")).thenReturn(property);
		Mockito.when(node.getProperty("minAge").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("minAge").getValue().getString()).thenReturn("minAge");
		Mockito.when(node.getProperty("reservationRequired")).thenReturn(property);
		Mockito.when(node.getProperty("reservationRequired").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("reservationRequired").getValue().getString()).thenReturn("reservationRequired");
		Mockito.when(node.getProperty("zomatoURL")).thenReturn(property);
		Mockito.when(node.getProperty("zomatoURL").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("zomatoURL").getValue().getString()).thenReturn("zomatoURL");
		Mockito.when(node.getProperty("storeTag")).thenReturn(property);
		Mockito.when(node.getProperty("storeTag").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("storeTag").getValue().getString()).thenReturn("storeTag");
		Mockito.when(node.getProperty("storeName")).thenReturn(property);
		Mockito.when(node.getProperty("storeName").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("storeName").getValue().getString()).thenReturn("storeName");
		Mockito.when(node.getProperty("gratuityRequired")).thenReturn(property);
		Mockito.when(node.getProperty("gratuityRequired").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("gratuityRequired").getValue().getString()).thenReturn("gratuityRequired");
		Mockito.when(node.getProperty("pricingAmount")).thenReturn(property);
		Mockito.when(node.getProperty("pricingAmount").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("pricingAmount").getValue().getString()).thenReturn("pricingAmount");
		Mockito.when(node.getProperty("pricingOption")).thenReturn(property);
		Mockito.when(node.getProperty("pricingOption").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("pricingOption").getValue().getString()).thenReturn("pricingOption");
		Mockito.when(node.getProperty("eventDate")).thenReturn(property);
		Mockito.when(node.getProperty("eventDate").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventDate").getValue().getString()).thenReturn("2019-01-11T00:00:00.000Z");
		Mockito.when(node.getProperty("eventEndTime")).thenReturn(property);
		Mockito.when(node.getProperty("eventEndTime").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventEndTime").getValue().getString()).thenReturn("eventEndTime");
		Mockito.when(node.getProperty("eventStartTime")).thenReturn(property);
		Mockito.when(node.getProperty("eventStartTime").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("eventStartTime").getValue().getString()).thenReturn("eventStartTime");
		Mockito.when(node.getProperty("scheduleDescription")).thenReturn(property);
		Mockito.when(node.getProperty("scheduleDescription").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("scheduleDescription").getValue().getString()).thenReturn("scheduleDescription");
		Mockito.when(node.getProperty("additionalDateInfo")).thenReturn(property);
		Mockito.when(node.getProperty("additionalDateInfo").getValue()).thenReturn(value);
		Mockito.when(node.getProperty("additionalDateInfo").getValue().getString()).thenReturn("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setAdditionalDateInfo("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setEventDate("2020-01-17T00:00:00.000Z");
		locationDateDetailsPojo.setEventEndTime("eventEndTime");
		locationDateDetailsPojo.setEventStartTime("eventStartTime");
		locationDateDetailsPojo.setScheduleDescription("scheduleDescription");
		locationDates.add(locationDateDetailsPojo);
		locationDetailsPojo.setGratuityRequired("gratuityRequired");
		locationDetailsPojo.setLocationDateDetails(locationDates);
		locationDetailsPojo.setStoreName("locationName");
		locationDetailsPojo.setPricingAmount("pricingAmount");
		locationDetailsPojo.setPricingOption("pricingOption");
		locationDetailsPojo.setStoreTag("storeTag");
		locationDetailsPojo.setZomatoURL("zomatoURL");
		locationDetails.add(locationDetailsPojo);
		eventPojo.setEventId("1");
		eventPojo.setEventTitle("eventTitle");
		eventPojo.setLocationDetails(locationDetails);
		eventPojo.setMinAge("minAge");
		eventPojo.setReservationRequired("reservationRequired");
		eventPojo.setEventDescription("eventDescriptions");
		Mockito.when(nodeIterator.hasNext()).thenReturn(true,true,true,false);
		Mockito.when(nodeIterator.next()).thenReturn(node);
		searchEvents.getSearchResults(searchFilters);
	}

}
